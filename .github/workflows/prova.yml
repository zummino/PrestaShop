name: prova tests
on: [ push, pull_request ]
jobs:
  integration:
    name: prova tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: [ '7.2', '7.3']
      fail-fast: false
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ github.token }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: mbstring, intl, gd, xml, dom, json, fileinfo, curl, zip, iconv
      - name: Setup MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          mysql version: '8.0'
          mysql database: 'prestashop'
          mysql root password: 'password'
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - uses: actions/checkout@v2

      - name: PrestaShop Configuration
        run: |
          cp .github/workflows/phpunit/parameters.yml app/config/parameters.yml
          cp .github/workflows/phpunit/parameters.php app/config/parameters.php

      
      - name: "Validate composer.json and composer.lock"
        run: "composer validate --strict"

      - name: "Determine composer cache directory"
        id: "determine-composer-cache-directory"
        run: "echo \"::set-output name=directory::$(composer config cache-dir)\""
        
        
      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache Node Directory
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Cache Composer Directory
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Composer Install
        run: composer install --ansi --prefer-dist --no-interaction --no-progress

              
      - name: Build theme assets
        run: sudo make front-classic

      - name: Change MySQL authentication method
        run: mysql -h127.0.0.1 -uroot -ppassword -e "ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'password'; FLUSH PRIVILEGES;"

            
      - name: Step 2 - Visualizzare tag corrente
        run: |
          echo "Vediamo il tag corrente:"
          echo "${GITHUB_REF#refs/tags/}"
          echo "${GITHUB_REF#refs/heads/}"
          echo "Vediamo se si potrebbe capire automaticamente che si usano gli hooks"
          echo "Stampa a video degli utlimi 5 caratteri del tag della release corrente"
          varTemp=$(echo "${GITHUB_REF#refs/tags/}" | tail -c 6)
          echo "$varTemp"
          echo "Vediamo qual è l'id dell'attuale commit"
          echo "$GITHUB_SHA"
          echo "HO FINITO LO STEP""
      - name: Step 3 - Creazione directory Test Suite
        run: |
          ls -a
          if [ ! -d "/home/runner/work/Tesi-StrumentoGenerale/Tesi-StrumentoGenerale/TestSuite" ]; then
            echo "Vedi se sono dentro l'if numero 1"
            sudo mkdir TestSuite
          fi
          echo "Vediamo se ha creato la cartella"
          ls -a    
          echo "HO FINITO LO STEP"
          
         - name: Step 6 - Set up JDK 1.8 per progetti di utility
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
            
      - name: Step 7 - Install Chrome Headless
        run: |
          sudo apt-get update
          sudo apt-get upgrade
          sudo apt-get -u dist-upgrade
          sudo apt-get install -y libappindicator1 fonts-liberation
          sudo apt-get -y install dbus-x11 xfonts-base xfonts-100dpi xfonts-75dpi xfonts-scalable
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt-get -f install
          google-chrome-stable --headless --disable-gpu    
          
      - name: Step 8 - Install Chrome-Driver for test junit
        run:  |
            wget https://chromedriver.storage.googleapis.com/2.41/chromedriver_linux64.zip
            echo "Vedo se si trova il punto zip"
            ls -a
            echo "Provo ad unzippare chormedriver_linux64.zip"
            unzip chromedriver_linux64.zip
            sudo mv chromedriver /home/runner/work/Tesi-StrumentoGenerale/Tesi-StrumentoGenerale/chromedriver_v94_linux64/chromedriver
            sudo chown root:root /home/runner/work/Tesi-StrumentoGenerale/Tesi-StrumentoGenerale/chromedriver_v94_linux64/chromedriver
            sudo chmod +x /home/runner/work/Tesi-StrumentoGenerale/Tesi-StrumentoGenerale/chromedriver_v94_linux64/chromedriver
            echo "Vediamo il nome della cartella unzippata"
            ls -a
            echo "Vediamo se ha scaricato il driver"
            cd chromedriver_v94_linux64
            echo "Contenuto della cartella chromedriver_v94_linux64"
            ls -a
          
      - name: Step 9 - Eseguire test maven
        run:  |
            cd /home/runner/work/Tesi-StrumentoGenerale/Tesi-StrumentoGenerale/project-test-headless
            sudo bash -c 'mvn test site' || echo "Uno o più test sono falliti."
                 
      - name: Step 10 - Visualizzare report test
        run: |
            cd /home/runner/work/Tesi-StrumentoGenerale/Tesi-StrumentoGenerale/project-test-headless/target/surefire-reports
            ls -a 
            echo "Visualizziamo adesso tutti i report txt ottenuti dalle nostre test suite"
            cat *.txt
            echo "Fine visualizzazione report!!!"                
        
